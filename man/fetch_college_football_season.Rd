% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_college_football_season.R
\name{fetch_college_football_season}
\alias{fetch_college_football_season}
\title{Fetch college football season information using Common API}
\usage{
fetch_college_football_season(
  year = as.integer(format(Sys.Date(), "\%Y")),
  raw = FALSE
)
}
\arguments{
\item{year}{Integer. Season year to fetch (default: current year).
Examples: 2024, 2023, 2025, etc.}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'cfb_season_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data frame. The main purpose is global
environment assignment of \code{cfb_season} containing:
\itemize{
\item Season information: year, start/end dates, display name
\item Season types: preseason, regular season, postseason details
\item Type details: start/end dates, standings availability
\item Administrative info: IDs, abbreviations, names
}
}
\description{
Retrieves comprehensive college football season information from ESPN's Common API.
The function fetches season dates, types (preseason, regular season, postseason),
and standings availability for college football seasons.
}
\details{
The function creates a structured data frame with college football season information.
Each row represents a season type (preseason, regular, postseason) within a season,
providing complete timing and administrative details.

\strong{Season Information}:
\itemize{
\item Identity: season year and display name
\item Duration: overall season start and end dates
\item Structure: breakdown into season types
}

\strong{Season Types}:
\itemize{
\item Preseason: exhibition games and preparation
\item Regular Season: conference and non-conference games
\item Postseason: bowl games, playoffs, championship
}

\strong{Administrative Details}:
\itemize{
\item Identifiers: type IDs for API calls
\item Names: full names and abbreviations
\item Features: standings availability, special characteristics
}
}
\examples{
\dontrun{
# Get current season information
fetch_college_football_season()

# Get specific season
fetch_college_football_season(2024)

# Check the data
head(cfb_season)

# View season structure
season_overview <- cfb_season[, c("season_year", "season_type_name",
                                 "season_type_start_date", "season_type_end_date")]
print("Season structure:")
print(season_overview)

# Check current season phase
current_date <- Sys.Date()
cfb_season$type_start <- as.Date(cfb_season$season_type_start_date)
cfb_season$type_end <- as.Date(cfb_season$season_type_end_date)

current_phase <- cfb_season[
  !is.na(cfb_season$type_start) & !is.na(cfb_season$type_end) &
  cfb_season$type_start <= current_date & cfb_season$type_end >= current_date,
  c("season_year", "season_type_name", "season_type_start_date", "season_type_end_date")
]

if(nrow(current_phase) > 0) {
  print("Current season phase:")
  print(current_phase)
} else {
  print("No active season phase found for current date")
}

# Analyze season dates
if(require(dplyr, quietly = TRUE)) {
  season_summary <- cfb_season \%>\%
    filter(!is.na(season_type_name)) \%>\%
    mutate(
      start_date = as.Date(season_type_start_date),
      end_date = as.Date(season_type_end_date),
      duration_days = as.numeric(end_date - start_date)
    ) \%>\%
    select(season_year, season_type_name, start_date, end_date, duration_days) \%>\%
    arrange(start_date)

  print("Season phase durations:")
  print(season_summary)
}

# Check standings availability
standings_info <- cfb_season[cfb_season$season_type_has_standings == "true",
                            c("season_year", "season_type_name", "season_type_has_standings")]

if(nrow(standings_info) > 0) {
  print("Season types with standings:")
  print(standings_info)
}

# Season type breakdown
type_counts <- table(cfb_season$season_type_name[!is.na(cfb_season$season_type_name)])
print("Season types available:")
print(type_counts)

# Calculate days until next season phase
upcoming_phases <- cfb_season[
  !is.na(cfb_season$season_type_start_date) &
  as.Date(cfb_season$season_type_start_date) > current_date,
  c("season_year", "season_type_name", "season_type_start_date")
]

if(nrow(upcoming_phases) > 0) {
  upcoming_phases$days_until <- as.numeric(as.Date(upcoming_phases$season_type_start_date) - current_date)
  upcoming_phases <- upcoming_phases[order(upcoming_phases$days_until), ]

  print("Upcoming season phases:")
  print(head(upcoming_phases))
}

# Season comparison across years
if(length(unique(cfb_season$season_year)) > 1) {
  regular_seasons <- cfb_season[cfb_season$season_type_name == "Regular Season" &
                               !is.na(cfb_season$season_type_name), ]

  if(nrow(regular_seasons) > 0) {
    regular_seasons$start_date <- as.Date(regular_seasons$season_type_start_date)
    regular_seasons$end_date <- as.Date(regular_seasons$season_type_end_date)
    regular_seasons$duration <- as.numeric(regular_seasons$end_date - regular_seasons$start_date)

    print("Regular season comparison:")
    print(regular_seasons[, c("season_year", "start_date", "end_date", "duration")])
  }
}
}

}
