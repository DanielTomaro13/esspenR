% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_soccer_team_schedule.R
\name{fetch_soccer_team_schedule}
\alias{fetch_soccer_team_schedule}
\title{Fetch soccer team schedule data using ESPN API}
\usage{
fetch_soccer_team_schedule(
  league_slug,
  team_id,
  season = NULL,
  return_type = "all",
  raw = FALSE
)
}
\arguments{
\item{league_slug}{Character. ESPN league slug (required).
Examples: "eng.1" (Premier League), "esp.1" (La Liga), "uefa.champions" (Champions League).
Use \code{fetch_soccer_leagues()} to get available league slugs.}

\item{team_id}{Character or Numeric. ESPN team ID (required).
The unique identifier for the team in ESPN's database.
Use scoreboard data or team endpoints to find team IDs.}

\item{season}{Character. Season year (optional).
Format: "YYYY" (e.g., "2024"). If not specified, returns current season.}

\item{return_type}{Character. Type of data to return (default: "all").
Options are:
\itemize{
\item "team_info" - Basic team information and season details
\item "schedule" - Complete schedule with match details
\item "all" - Both team info and schedule
}}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'soccer_team_schedule_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data. The main purpose is global
environment assignment based on return_type:
\itemize{
\item \code{soccer_team_schedule_info} - Team information data frame
\item \code{soccer_team_schedule} - Complete schedule data frame
\item \code{soccer_team_schedule_raw} - Raw JSON response (if raw = TRUE)
}
}
\description{
Retrieves soccer team schedule and match history from ESPN's API for a specific team.
The function fetches comprehensive schedule data including past results and upcoming fixtures.
}
\details{
The function creates structured data frames with comprehensive team schedule information:

\strong{Team Info} (\code{soccer_team_schedule_info}):
\itemize{
\item Team details: ID, name, display name, abbreviation
\item Team branding: location, color, logo URL
\item Season information: year, type, total events
}

\strong{Schedule} (\code{soccer_team_schedule}):
\itemize{
\item Match details: event_id, name, short_name, date, status
\item Game context: home/away indicator, opponent details
\item Results: team score, opponent score, result (W/L/D)
\item Venue: stadium name, city, attendance
\item Competition: tournament/league name
\item Timing: clock, status details
}

\strong{Match Status Examples}:
\itemize{
\item "STATUS_SCHEDULED" - Upcoming match
\item "STATUS_IN_PROGRESS" - Live match
\item "STATUS_FINAL" - Completed match
\item "STATUS_POSTPONED" - Postponed match
}
}
\examples{
\dontrun{
# Get Liverpool's Premier League schedule (team ID: 364)
fetch_soccer_team_schedule("eng.1", "364")

# Get Manchester City's schedule for specific season
fetch_soccer_team_schedule("eng.1", "382", season = "2024")

# Get Barcelona's La Liga schedule
fetch_soccer_team_schedule("esp.1", "83")

# Get Real Madrid's Champions League schedule
fetch_soccer_team_schedule("uefa.champions", "86")

# Check what data was created
head(soccer_team_schedule_info)
head(soccer_team_schedule)

# Get only schedule data
fetch_soccer_team_schedule("eng.1", "364", return_type = "schedule")

# Analyze team performance
completed_matches <- soccer_team_schedule[
  soccer_team_schedule$event_status == "STATUS_FINAL",
]

# Count wins, losses, draws
results_summary <- table(completed_matches$result)
print(results_summary)

# Find home vs away performance
home_matches <- soccer_team_schedule[
  soccer_team_schedule$is_home_game == "TRUE" &
  soccer_team_schedule$event_status == "STATUS_FINAL",
]
away_matches <- soccer_team_schedule[
  soccer_team_schedule$is_home_game == "FALSE" &
  soccer_team_schedule$event_status == "STATUS_FINAL",
]

# Find upcoming fixtures
upcoming_matches <- soccer_team_schedule[
  soccer_team_schedule$event_status == "STATUS_SCHEDULED",
]

# Find matches against specific opponent
rival_matches <- soccer_team_schedule[
  grepl("Manchester United", soccer_team_schedule$opponent_team_name),
]

# Find high-scoring matches
high_scoring <- soccer_team_schedule[
  !is.na(soccer_team_schedule$team_score) &
  !is.na(soccer_team_schedule$opponent_score) &
  (as.numeric(soccer_team_schedule$team_score) +
   as.numeric(soccer_team_schedule$opponent_score)) >= 4,
]

# Find matches by venue
anfield_matches <- soccer_team_schedule[
  grepl("Anfield", soccer_team_schedule$venue_name),
]

# Calculate goal statistics
completed <- soccer_team_schedule[
  soccer_team_schedule$event_status == "STATUS_FINAL" &
  !is.na(soccer_team_schedule$team_score),
]
goals_scored <- sum(as.numeric(completed$team_score), na.rm = TRUE)
goals_conceded <- sum(as.numeric(completed$opponent_score), na.rm = TRUE)

# Get raw data for debugging
fetch_soccer_team_schedule("eng.1", "364", raw = TRUE)
}

}
\seealso{
\code{\link{fetch_soccer_leagues}} to get available league slugs
\code{\link{fetch_soccer_scoreboard}} to find team IDs from current matches

Common team IDs for major clubs:
\itemize{
\item \code{364} - Liverpool FC
\item \code{382} - Manchester City
\item \code{360} - Manchester United
\item \code{359} - Chelsea FC
\item \code{361} - Arsenal FC
\item \code{83} - FC Barcelona
\item \code{86} - Real Madrid
\item \code{80} - Bayern Munich
}
}
