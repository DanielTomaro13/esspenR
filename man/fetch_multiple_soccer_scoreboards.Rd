% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_soccer_scoreboard.R
\name{fetch_multiple_soccer_scoreboards}
\alias{fetch_multiple_soccer_scoreboards}
\title{Fetch multiple soccer league scoreboards}
\usage{
fetch_multiple_soccer_scoreboards(
  league_slugs,
  dates = NULL,
  return_type = "all",
  delay = 0.5,
  raw = FALSE
)
}
\arguments{
\item{league_slugs}{Character vector. ESPN league slugs.
Examples: c("eng.1", "esp.1", "ger.1") for Premier League, La Liga, Bundesliga.}

\item{dates}{Character. Date range for matches (optional, applied to all leagues).
Format: "YYYYMMDD" for single date or "YYYYMMDD-YYYYMMDD" for range.}

\item{return_type}{Character. Type of data to return (default: "all").
Same options as \code{\link{fetch_soccer_scoreboard}}.}

\item{delay}{Numeric. Delay in seconds between API requests (default: 0.5).
Used to be respectful to ESPN's servers and avoid rate limiting.}

\item{raw}{Logical. If TRUE, assigns raw JSON to global environment
for the first league only (default: FALSE).}
}
\value{
Invisibly returns the combined data frames. The main purpose is global
environment assignment of combined datasets from all leagues.
}
\description{
Retrieves scoreboard data for multiple soccer leagues with rate limiting to
be respectful to ESPN's API. This function calls \code{\link{fetch_soccer_scoreboard}}
for each league and combines the results.
}
\details{
The function processes leagues sequentially with a configurable delay
between requests. Failed requests for individual leagues are logged but
do not stop the overall process. The final datasets contain data from
all successfully processed leagues.
}
\examples{
\dontrun{
# Get scoreboards for major European leagues
major_leagues <- c("eng.1", "esp.1", "ger.1", "ita.1", "fra.1")
fetch_multiple_soccer_scoreboards(major_leagues)

# Get scoreboards for specific date
fetch_multiple_soccer_scoreboards(major_leagues, dates = "20250125")

# Get matches only for multiple leagues
fetch_multiple_soccer_scoreboards(major_leagues, return_type = "matches")

# Use longer delay for larger requests
fetch_multiple_soccer_scoreboards(major_leagues, delay = 1.0)

# Analyze combined results
unique_leagues <- unique(soccer_scoreboard_matches$league_slug)
cat("Retrieved scoreboards for", length(unique_leagues), "leagues\n")

# Find all live matches across leagues
live_matches <- soccer_scoreboard_matches[
  soccer_scoreboard_matches$event_status == "STATUS_IN_PROGRESS",
]

# Compare scores across leagues
completed_matches <- soccer_scoreboard_matches[
  soccer_scoreboard_matches$event_status == "STATUS_FINAL" &
  !is.na(soccer_scoreboard_matches$home_score),
]

# Get all matches by date
todays_matches <- soccer_scoreboard_matches[
  as.Date(soccer_scoreboard_matches$event_date) == Sys.Date(),
]
}

}
\seealso{
\code{\link{fetch_soccer_scoreboard}} for single league data
}
