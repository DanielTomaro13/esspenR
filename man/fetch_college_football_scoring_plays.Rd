% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_college_football_playbyplay.R
\name{fetch_college_football_scoring_plays}
\alias{fetch_college_football_scoring_plays}
\title{Fetch college football scoring plays using Site API}
\usage{
fetch_college_football_scoring_plays(game_id, raw = FALSE)
}
\arguments{
\item{game_id}{Character. ESPN game ID for the specific game.
Examples: "401677192" (CFP Championship), "400934572", etc.}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'cfb_scoring_plays_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data frame. The main purpose is global
environment assignment of \code{cfb_scoring_plays} containing:
\itemize{
\item Scoring details: play description, type, points scored
\item Game state: period, clock, score after play
\item Team information: scoring team details and logo
\item Sequence: chronological order of all scoring plays
}
}
\description{
Retrieves detailed scoring plays information for a specific college football game from ESPN's Site API.
The function fetches comprehensive scoring data including touchdowns, field goals,
safeties, and other scoring plays with timing and team information.
}
\details{
The function creates a structured data frame with all scoring plays from the game.
Each row represents a single scoring play with complete context about when
and how the points were scored.

\strong{Scoring Information}:
\itemize{
\item Play details: description of the scoring play
\item Type: touchdown, field goal, safety, etc.
\item Method: rushing, passing, kicking, defensive, etc.
}

\strong{Game Context}:
\itemize{
\item Timing: period and game clock when score occurred
\item Score: game score after the scoring play
\item Sequence: chronological order of scoring
}

\strong{Team Details}:
\itemize{
\item Identity: team that scored with full name and abbreviation
\item Branding: team logo for visualization
}
}
\examples{
\dontrun{
# Get scoring plays for CFP Championship
fetch_college_football_scoring_plays("401677192")

# Check the data
head(cfb_scoring_plays)
nrow(cfb_scoring_plays)

# View all scoring plays in order
scoring_summary <- cfb_scoring_plays[, c("scoring_play_number", "period_number", "clock_display",
                                        "scoring_team_abbreviation", "scoring_type_display_name",
                                        "play_text", "away_score", "home_score")]

print("Game scoring summary:")
print(scoring_summary)

# Analyze scoring by team
if(require(dplyr, quietly = TRUE)) {
  team_scoring <- cfb_scoring_plays \%>\%
    group_by(scoring_team_abbreviation, scoring_type_display_name) \%>\%
    summarise(
      count = n(),
      .groups = 'drop'
    ) \%>\%
    arrange(scoring_team_abbreviation, desc(count))

  print("Scoring by team and type:")
  print(team_scoring)
}

# Analyze scoring by period
period_scoring <- table(cfb_scoring_plays$period_number, cfb_scoring_plays$scoring_team_abbreviation)
print("Scoring plays by period:")
print(period_scoring)

# Find touchdowns vs field goals
touchdowns <- cfb_scoring_plays[cfb_scoring_plays$scoring_type_abbreviation == "TD", ]
field_goals <- cfb_scoring_plays[cfb_scoring_plays$scoring_type_abbreviation == "FG", ]

cat(sprintf("Touchdowns: \%d\n", nrow(touchdowns)))
cat(sprintf("Field Goals: \%d\n", nrow(field_goals)))

if(nrow(touchdowns) > 0) {
  td_types <- table(touchdowns$play_type_text)
  print("Touchdown types:")
  print(td_types)
}

# Score progression analysis
cfb_scoring_plays$score_diff <- abs(as.numeric(cfb_scoring_plays$home_score) -
                                   as.numeric(cfb_scoring_plays$away_score))

print("Score differential after each scoring play:")
score_progression <- cfb_scoring_plays[, c("scoring_play_number", "period_number",
                                          "clock_display", "scoring_team_abbreviation",
                                          "away_score", "home_score", "score_diff")]
print(score_progression)

# Late game scoring (4th quarter)
fourth_quarter_scoring <- cfb_scoring_plays[cfb_scoring_plays$period_number == "4", ]
if(nrow(fourth_quarter_scoring) > 0) {
  print("Fourth quarter scoring:")
  print(fourth_quarter_scoring[, c("clock_display", "scoring_team_abbreviation",
                                  "scoring_type_display_name", "play_text")])
}

# Longest scoring plays (for touchdowns)
if(nrow(touchdowns) > 0) {
  # Extract yardage from play text (simplified pattern matching)
  touchdowns$yards <- as.numeric(gsub(".*?(\\\\d+) Yd.*", "\\\\1", touchdowns$play_text))

  longest_tds <- touchdowns[order(-touchdowns$yards, na.last = TRUE), ]
  print("Longest touchdown plays:")
  print(head(longest_tds[, c("scoring_team_abbreviation", "yards", "play_text")], 5))
}

# Game momentum shifts
cfb_scoring_plays$cumulative_diff <- NA
for(i in 1:nrow(cfb_scoring_plays)) {
  home_score <- as.numeric(cfb_scoring_plays$home_score[i])
  away_score <- as.numeric(cfb_scoring_plays$away_score[i])
  cfb_scoring_plays$cumulative_diff[i] <- home_score - away_score
}

print("Score momentum (positive = home team leading):")
momentum <- cfb_scoring_plays[, c("scoring_play_number", "period_number",
                                 "scoring_team_abbreviation", "cumulative_diff")]
print(momentum)
}

}
