% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_college_football_team_news.R
\name{fetch_college_football_news}
\alias{fetch_college_football_news}
\title{Fetch college football news using Site API}
\usage{
fetch_college_football_news(limit = 50, team = NULL, raw = FALSE)
}
\arguments{
\item{limit}{Integer. Maximum number of articles to retrieve (default: 50).
ESPN typically returns 10-50 articles per request.}

\item{team}{Character. Team abbreviation to filter news by specific team (default: NULL for all news).
Examples: "GT", "UGA", "BAMA", etc.}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'cfb_news_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data frame. The main purpose is global
environment assignment of \code{cfb_news} containing:
\itemize{
\item Article metadata: ID, headline, description, story content
\item Publishing information: published date, last modified, byline
\item Content classification: premium status, section, type, keywords, categories
\item Media content: video and image information with URLs
\item Links: direct URLs to full articles
\item Related content: associated teams, categories
}
}
\description{
Retrieves latest college football news from ESPN's Site API.
The function fetches comprehensive news information including articles,
videos, images, and metadata for college football.
}
\details{
The function creates a structured data frame with comprehensive college football news information.
Each row represents a news article with associated metadata, media content,
and publishing details.

\strong{Article Information}:
\itemize{
\item Content: headline, description, full story text
\item Publishing: publication date, last modified date, author byline
\item Classification: section, article type, keywords, categories, premium status
}

\strong{Media Content}:
\itemize{
\item Video: ID, headline, description, duration, premium status, thumbnail
\item Images: ID, caption, URL, dimensions
\item Links: direct URLs to full articles on ESPN
}

\strong{Related Content}:
\itemize{
\item Teams: associated college football teams mentioned in articles
\item Categories: article categories and classifications
\item Keywords: searchable keywords and tags
}
}
\examples{
\dontrun{
# Get latest college football news
fetch_college_football_news()

# Get limited number of articles
fetch_college_football_news(limit = 20)

# Get news for specific team
fetch_college_football_news(team = "GT")

# Check the data
head(cfb_news)

# View recent headlines
recent_news <- cfb_news[1:10, c("headline", "published", "byline", "related_teams")]
print(recent_news)

# Find video content
video_news <- cfb_news[!is.na(cfb_news$video_id),
                      c("headline", "video_headline", "video_duration")]
if(nrow(video_news) > 0) {
  print("Articles with video content:")
  print(video_news)
}

# Get articles with images
image_news <- cfb_news[!is.na(cfb_news$image_url),
                      c("headline", "image_caption", "image_url")]
if(nrow(image_news) > 0) {
  print("Articles with images:")
  print(head(image_news))
}

# Search for specific topics
search_term <- "playoff"
relevant_articles <- cfb_news[
  grepl(search_term, cfb_news$headline, ignore.case = TRUE) |
  grepl(search_term, cfb_news$description, ignore.case = TRUE) |
  grepl(search_term, cfb_news$keywords, ignore.case = TRUE),
  c("headline", "description", "published", "related_teams")
]

if(nrow(relevant_articles) > 0) {
  print(sprintf("Articles mentioning '\%s':", search_term))
  print(relevant_articles)
}

# Analyze news by categories
if(require(dplyr, quietly = TRUE)) {
  category_analysis <- cfb_news \%>\%
    filter(!is.na(categories) & categories != "") \%>\%
    separate_rows(categories, sep = ", ") \%>\%
    count(categories, sort = TRUE) \%>\%
    head(10)

  print("Most common news categories:")
  print(category_analysis)
}

# Team mention analysis
team_mentions <- cfb_news[!is.na(cfb_news$related_teams) & cfb_news$related_teams != "", ]
if(nrow(team_mentions) > 0) {
  print("Articles with team mentions:")
  print(head(team_mentions[, c("headline", "related_teams")], 10))
}

# Premium vs free content
premium_summary <- table(cfb_news$premium)
print("Premium content breakdown:")
print(premium_summary)

# Recent vs older articles
if(!all(is.na(cfb_news$published))) {
  cfb_news$published_date <- as.Date(substr(cfb_news$published, 1, 10))
  recent_cutoff <- Sys.Date() - 7  # Last 7 days

  recent_count <- sum(cfb_news$published_date >= recent_cutoff, na.rm = TRUE)
  total_count <- nrow(cfb_news)

  message(sprintf("Recent articles (last 7 days): \%d/\%d", recent_count, total_count))
}

# Article types analysis
type_summary <- table(cfb_news$type)
print("Article types:")
print(sort(type_summary, decreasing = TRUE))
}

}
