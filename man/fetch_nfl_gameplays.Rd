% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_nfl_gameplays.R
\name{fetch_nfl_gameplays}
\alias{fetch_nfl_gameplays}
\title{Fetch NFL game plays data using Core API}
\usage{
fetch_nfl_gameplays(event_id, limit = 300, return_type = "all", raw = FALSE)
}
\arguments{
\item{event_id}{Character or Numeric. ESPN event ID (required).
The unique identifier for the game in ESPN's database.}

\item{limit}{Numeric. Maximum number of plays to retrieve (default: 300).
ESPN Core API supports pagination with this parameter.}

\item{return_type}{Character. Type of data to return (default: "all").
Options are:
\itemize{
\item "summary" - Basic summary information
\item "plays" - Individual play data
\item "participants" - Player participation data
\item "all" - All data types combined
}}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'nfl_plays_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data. The main purpose is global
environment assignment based on return_type:
\itemize{
\item \code{nfl_plays_summary} - Summary data frame
\item \code{nfl_plays_plays} - Plays data frame
\item \code{nfl_plays_participants} - Participants data frame
\item \code{nfl_plays_raw} - Raw JSON response (if raw = TRUE)
}
}
\description{
Retrieves detailed play information from ESPN's Core API.
The function fetches comprehensive play data with participant details
for a specific NFL game.
}
\details{
The function creates structured data frames with comprehensive play information:

\strong{Summary} (\code{nfl_plays_summary}):
\itemize{
\item Request metadata: total_plays, total_pages, page_index, page_size
\item Event identification and pagination information
}

\strong{Plays} (\code{nfl_plays_plays}):
\itemize{
\item Play identification: play_id, sequence_number, type information
\item Game situation: period, clock, down, distance, yard_line
\item Field position: start and end situations with yards_to_endzone
\item Scoring: scoring_play flag, score_value, running scores
\item Statistics: stat_yardage, yards_after_catch
}

\strong{Participants} (\code{nfl_plays_participants}):
\itemize{
\item Player references: athlete_ref (API reference URLs)
\item Participation details: order, type (rusher, passer, receiver, etc.)
\item Play context linking
}

This provides detailed individual play information from ESPN's Core API,
including specific player participation data with API references for
further player detail retrieval.
}
\examples{
\dontrun{
# Get complete plays data for a specific game
fetch_nfl_gameplays(event_id = "401671617")

# Check what data was created
head(nfl_plays_summary)
head(nfl_plays_plays)
head(nfl_plays_participants)

# Get only plays data with higher limit
fetch_nfl_gameplays(event_id = "401671617", limit = 500, return_type = "plays")

# Analyze scoring plays
scoring_plays <- nfl_plays_plays[
  nfl_plays_plays$scoring_play == "TRUE",
  c("sequence_number", "period_number", "clock_display_value",
    "score_value", "short_text")
]
print(scoring_plays)

# View play types
play_type_summary <- table(nfl_plays_plays$type_text)
print(play_type_summary)

# Third down situations
third_downs <- nfl_plays_plays[
  nfl_plays_plays$start_down == "3",
  c("sequence_number", "start_distance", "type_text", "short_text")
]
head(third_downs)

# Participant analysis
participant_types <- table(nfl_plays_participants$participant_type)
print(participant_types)

# Get raw data for debugging
fetch_nfl_gameplays(event_id = "401671617", raw = TRUE)
str(nfl_plays_raw, max.level = 2)
}

}
\seealso{
\code{\link{fetch_multiple_nfl_gameplays}} for fetching
multiple games' data
}
