% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_nhl_player_stats.R
\name{fetch_multiple_nhl_player_stats}
\alias{fetch_multiple_nhl_player_stats}
\title{Fetch multiple NHL player statistics}
\usage{
fetch_multiple_nhl_player_stats(player_ids, delay = 0.5, raw = FALSE)
}
\arguments{
\item{player_ids}{Character or Numeric vector. ESPN NHL player IDs.
Vector of unique identifiers for players in ESPN's database.}

\item{delay}{Numeric. Delay in seconds between API requests (default: 0.5).
Used to be respectful to ESPN's servers and avoid rate limiting.}

\item{raw}{Logical. If TRUE, assigns raw JSON to global environment
for the first player only (default: FALSE).}
}
\value{
Invisibly returns the combined data frame. The main purpose is global
environment assignment of combined dataset from all players.
}
\description{
Retrieves statistics for multiple NHL players with rate limiting to
be respectful to ESPN's API. This function calls \code{\link{fetch_nhl_player_stats}}
for each player and combines the results.
}
\details{
The function processes players sequentially with a configurable delay
between requests. Failed requests for individual players are logged but
do not stop the overall process. The final dataset contains data from
all successfully processed players with complete game-by-game statistics.

This is particularly useful for team analysis, comparing multiple players,
or building comprehensive hockey databases with detailed performance metrics.
}
\examples{
\dontrun{
# Get stats for multiple players
player_ids <- c("3114478", "5493", "4024716")  # McDavid, Crosby, Pastrnak
fetch_multiple_nhl_player_stats(player_ids)

# Use longer delay for larger requests
fetch_multiple_nhl_player_stats(player_ids, delay = 1.0)

# Analyze combined results
unique_players <- unique(nhl_player_gamelog$player_display_name)
cat("Retrieved statistics for", length(unique_players), "players\n")

# Compare power play production
pp_production <- aggregate(
  cbind(as.numeric(nhl_player_gamelog$power_play_goals),
        as.numeric(nhl_player_gamelog$power_play_assists)),
  by = list(nhl_player_gamelog$player_display_name),
  FUN = sum, na.rm = TRUE
)
colnames(pp_production) <- c("Player", "PP_Goals", "PP_Assists")
print(pp_production)

# Analyze game-winning goal leaders
gwg_leaders <- aggregate(
  as.numeric(nhl_player_gamelog$game_winning_goals),
  by = list(nhl_player_gamelog$player_display_name),
  FUN = sum, na.rm = TRUE
)
colnames(gwg_leaders) <- c("Player", "Game_Winning_Goals")
gwg_leaders <- gwg_leaders[order(-gwg_leaders$Game_Winning_Goals), ]
print(head(gwg_leaders))
}

}
\seealso{
\code{\link{fetch_nhl_player_stats}} for single player data
}
