% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_nfl_leaders.R
\name{fetch_nfl_leaders}
\alias{fetch_nfl_leaders}
\title{Fetch NFL league leaders data using Core API}
\usage{
fetch_nfl_leaders(
  year = 2024,
  season_type = 2,
  return_type = "all",
  fetch_athlete_info = TRUE,
  athlete_delay = 0.1,
  raw = FALSE
)
}
\arguments{
\item{year}{Character or Numeric. Season year (default: 2024).
The year of the NFL season to retrieve leaders for.}

\item{season_type}{Character or Numeric. Season type (default: 2).
Options are:
\itemize{
\item 1 - Preseason
\item 2 - Regular Season
\item 3 - Postseason
}}

\item{return_type}{Character. Type of data to return (default: "all").
Options are:
\itemize{
\item "summary" - Basic summary information
\item "categories" - Statistical categories information
\item "leaders" - Individual leader data
\item "all" - All data types combined
}}

\item{fetch_athlete_info}{Logical. Whether to fetch detailed athlete info
from reference URLs (default: TRUE). This makes additional API calls.}

\item{athlete_delay}{Numeric. Delay between athlete API requests in seconds
(default: 0.1). Used to be respectful to ESPN's servers.}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'nfl_leaders_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data. The main purpose is global
environment assignment based on return_type:
\itemize{
\item \code{nfl_leaders_summary} - Summary data frame
\item \code{nfl_leaders_categories} - Categories data frame
\item \code{nfl_leaders_leaders} - Leaders data frame
\item \code{nfl_leaders_raw} - Raw JSON response (if raw = TRUE)
}
}
\description{
Retrieves detailed league leader information from ESPN's Core API.
The function fetches comprehensive statistical leaders across multiple
categories for a specific season year and type.
}
\details{
The function creates structured data frames with comprehensive league leader information.
When \code{fetch_athlete_info = TRUE}, the function will make additional API calls
to retrieve detailed athlete information including names, positions, teams, and jersey numbers.
This significantly increases the data quality but also increases processing time and API load.

\strong{Summary} (\code{nfl_leaders_summary}):
\itemize{
\item Request metadata: season_year, season_type
\item Overall statistics: total_categories, total_leaders
}

\strong{Categories} (\code{nfl_leaders_categories}):
\itemize{
\item Category details: name, display_name, abbreviation
\item Category statistics: total_leaders per category
}

\strong{Leaders} (\code{nfl_leaders_leaders}):
\itemize{
\item Player details: athlete_id, name, position, jersey, team info
\item Statistical data: category, rank, value, display_value
\item API references: athlete_ref, team_ref for further queries
}
}
\examples{
\dontrun{
# Get complete leaders data for 2024 regular season with athlete details
fetch_nfl_leaders()

# Get leaders without fetching athlete details (faster)
fetch_nfl_leaders(fetch_athlete_info = FALSE)

# Get leaders with slower, more respectful API calls
fetch_nfl_leaders(athlete_delay = 0.2)

# Check what data was created
head(nfl_leaders_summary)
head(nfl_leaders_categories)
head(nfl_leaders_leaders)

# Analyze passing leaders with full details
passing_leaders <- nfl_leaders_leaders[
  nfl_leaders_leaders$category_name == "passingYards",
  c("rank", "athlete_display_name", "team_abbreviation",
    "athlete_position_abbreviation", "stat_display_value")
]
head(passing_leaders, 10)

# Team representation in leadership
team_leaders <- table(nfl_leaders_leaders$team_abbreviation)
team_leaders_sorted <- sort(team_leaders, decreasing = TRUE)
print("Teams with most statistical leaders:")
head(team_leaders_sorted, 10)
}

}
\seealso{
\code{\link{fetch_multiple_nfl_leaders}} for fetching
multiple seasons/types
}
