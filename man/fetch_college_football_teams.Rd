% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_college_football_teams.R
\name{fetch_college_football_teams}
\alias{fetch_college_football_teams}
\title{Fetch college football teams list using Site API}
\usage{
fetch_college_football_teams(
  limit = 1000,
  group = NULL,
  division = NULL,
  raw = FALSE
)
}
\arguments{
\item{limit}{Integer. Maximum number of teams to retrieve (default: 1000).
ESPN typically has 130+ FBS teams plus FCS teams.}

\item{group}{Character or numeric. Conference group ID to filter by (default: NULL for all teams).
Use group IDs from \code{get_cfb_conference_groups()} to filter by conference.}

\item{division}{Character. Division to filter by: "fbs", "fcs", or NULL for all (default: NULL).}

\item{raw}{Logical. If TRUE, assigns raw JSON response to global environment
as 'cfb_teams_raw' for debugging purposes (default: FALSE).}
}
\value{
Invisibly returns the processed data frame. The main purpose is global
environment assignment of \code{cfb_teams} containing:
\itemize{
\item Team identity: ID, UID, slug, abbreviation, names, nickname, location
\item Team branding: colors, logos with dimensions
\item Team status: active status, all-star designation
\item Venue information: stadium name, capacity, surface, location, indoor/outdoor
\item Conference details: conference ID, name, abbreviation
\item Group classification: conference group information
}
}
\description{
Retrieves a comprehensive list of college football teams from ESPN's Site API.
The function fetches basic team information that serves as a foundation
for other team-specific API calls.
}
\details{
The function creates a structured data frame with basic college football team information.
Each row represents a team with essential details needed for further API calls and analysis.
This serves as a master list for team identification and basic classification.

\strong{Team Information}:
\itemize{
\item Identity: team ID (for API calls), abbreviation, full names
\item Location: team location/city, nickname/mascot
\item Status: active status, special designations
}

\strong{Team Branding}:
\itemize{
\item Colors: primary and alternate team colors (hex codes)
\item Logos: logo URLs with dimensions and alt text
}

\strong{Venue Details}:
\itemize{
\item Stadium: name, capacity, playing surface
\item Location: city, state, zip code, country
\item Features: indoor/outdoor designation
}

\strong{Conference Classification}:
\itemize{
\item Conference: official conference affiliation
\item Group: ESPN's conference grouping system
\item Division: FBS/FCS classification (when available)
}
}
\examples{
\dontrun{
# Get all college football teams
fetch_college_football_teams()

# Get teams from specific conference group (SEC)
fetch_college_football_teams(group = "8")

# Check the data
head(cfb_teams)

# View team counts by conference
conf_counts <- table(cfb_teams$conference_name)
print("Teams per conference:")
print(sort(conf_counts[conf_counts > 0], decreasing = TRUE))

# Find teams by state
texas_teams <- cfb_teams[cfb_teams$venue_state == "TX" & !is.na(cfb_teams$venue_state), ]
print("Texas teams:")
print(texas_teams[, c("team_display_name", "conference_name", "venue_city")])

# Largest stadiums
capacity_data <- cfb_teams[!is.na(cfb_teams$venue_capacity) & cfb_teams$venue_capacity != "", ]
if(nrow(capacity_data) > 0) {
  capacity_data$capacity_num <- as.numeric(capacity_data$venue_capacity)
  largest_venues <- capacity_data[order(-capacity_data$capacity_num), ]

  print("Largest venues:")
  print(head(largest_venues[, c("team_display_name", "venue_name", "venue_capacity")], 10))
}

# Indoor vs outdoor stadiums
venue_types <- table(cfb_teams$venue_indoor[cfb_teams$venue_indoor != ""])
print("Venue types:")
print(venue_types)

# Teams by colors (find teams with specific colors)
red_teams <- cfb_teams[grepl("red|Red|ff0000|FF0000|cc0000|CC0000",
                            cfb_teams$team_color, ignore.case = TRUE), ]
if(nrow(red_teams) > 0) {
  print("Teams with red colors:")
  print(head(red_teams[, c("team_display_name", "team_color")], 10))
}

# Active vs inactive teams
status_counts <- table(cfb_teams$team_is_active)
print("Team status:")
print(status_counts)

# Conference group analysis
if(require(dplyr, quietly = TRUE)) {
  group_summary <- cfb_teams \%>\%
    filter(!is.na(group_name) & group_name != "") \%>\%
    group_by(group_name) \%>\%
    summarise(
      team_count = n(),
      conferences = n_distinct(conference_name, na.rm = TRUE),
      .groups = 'drop'
    ) \%>\%
    arrange(desc(team_count))

  print("Teams by conference group:")
  print(group_summary)
}

# Search for specific teams
team_search <- function(search_term) {
  matches <- cfb_teams[
    grepl(search_term, cfb_teams$team_display_name, ignore.case = TRUE) |
    grepl(search_term, cfb_teams$team_location, ignore.case = TRUE) |
    grepl(search_term, cfb_teams$team_nickname, ignore.case = TRUE),
    c("team_id", "team_display_name", "conference_name", "venue_city", "venue_state")
  ]
  return(matches)
}

# Find all "State" universities
state_universities <- team_search("State")
print("State universities:")
print(head(state_universities, 10))

# Find specific team by name
alabama_teams <- team_search("Alabama")
print("Alabama teams:")
print(alabama_teams)
}

}
\seealso{
\code{\link{get_cfb_conference_groups}} for conference group mappings
}
