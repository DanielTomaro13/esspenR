% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_nhl_playbyplay.R
\name{fetch_multiple_nhl_game_playbyplay}
\alias{fetch_multiple_nhl_game_playbyplay}
\title{Fetch multiple NHL game play-by-play data}
\usage{
fetch_multiple_nhl_game_playbyplay(
  event_ids,
  return_type = "all",
  delay = 0.3,
  raw = FALSE
)
}
\arguments{
\item{event_ids}{Character or Numeric vector. ESPN event IDs.
Vector of unique identifiers for games in ESPN's database.}

\item{return_type}{Character. Type of data to return (default: "all").
Same options as \code{\link{fetch_nhl_game_playbyplay}}.}

\item{delay}{Numeric. Delay in seconds between API requests (default: 0.3).
Used to be respectful to ESPN's servers and avoid rate limiting.}

\item{raw}{Logical. If TRUE, assigns raw JSON to global environment
for the first game only (default: FALSE).}
}
\value{
Invisibly returns the combined data frames. The main purpose is global
environment assignment of combined datasets from all games.
}
\description{
Retrieves play-by-play data for multiple NHL games with rate limiting to
be respectful to ESPN's API. This function calls \code{\link{fetch_nhl_game_playbyplay}}
for each game and combines the results.
}
\details{
The function processes games sequentially with a configurable delay
between requests. Failed requests for individual games are logged but
do not stop the overall process. The final datasets contain data from
all successfully processed games.

This is particularly useful for building comprehensive hockey databases,
analyzing team strategies across multiple games, studying player
performance patterns over time, or conducting advanced hockey analytics.
}
\examples{
\dontrun{
# Get play-by-play for multiple games
game_ids <- c("401589281", "401589282", "401589283")
fetch_multiple_nhl_game_playbyplay(game_ids)

# Get only plays data for multiple games
fetch_multiple_nhl_game_playbyplay(game_ids, return_type = "plays")

# Use longer delay for larger requests
fetch_multiple_nhl_game_playbyplay(game_ids, delay = 0.5)

# Analyze combined results
unique_games <- unique(nhl_pbp_game_summary$event_id)
cat("Retrieved play-by-play for", length(unique_games), "games\n")

# Power play analysis across multiple games
pp_goals <- nhl_pbp_plays[
  nhl_pbp_plays$scoringPlay == TRUE &
  nhl_pbp_plays$strength$abbreviation == "PP" &
  !is.na(nhl_pbp_plays$strength$abbreviation),
  c("event_id", "text", "participants")
]

# Penalty analysis across games
penalties <- nhl_pbp_plays[
  nhl_pbp_plays$type$text == "Penalty" &
  !is.na(nhl_pbp_plays$penaltyType$text),
  c("event_id", "penaltyType", "participants")
]

# Shot location analysis
shots_with_coords <- nhl_pbp_plays[
  nhl_pbp_plays$type$text \%in\% c("Shot", "Goal") &
  !is.na(nhl_pbp_plays$coordinate$x) &
  !is.na(nhl_pbp_plays$coordinate$y),
  c("event_id", "coordinate", "shotType", "scoringPlay")
]

# Faceoff win percentages by zone
faceoffs <- nhl_pbp_plays[
  nhl_pbp_plays$type$text == "Faceoff",
  c("event_id", "coordinate", "participants")
]
}

}
\seealso{
\code{\link{fetch_nhl_game_playbyplay}} for single game data
}
